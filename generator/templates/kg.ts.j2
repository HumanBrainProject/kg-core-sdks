/*  Copyright 2022 EBRAINS AISBL
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0.
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  This open source software code was developed in part or in whole in the
*  Human Brain Project, funded from the European Union's Horizon 2020
*  Framework Programme for Research and Innovation under
*  Specific Grant Agreements No. 720270, No. 785907, and No. 945539
*  (Human Brain Project SGA1, SGA2 and SGA3).
*/

import { KGConfig, RequestsWithTokenHandler, TokenHandler, CallableTokenHandler } from "./communication";
import { ResponseConfiguration, ExtendedResponseConfiguration, Pagination, Stage, ReleaseTreeScope } from "./request";import { Result, Instance, JsonLdDocument, ResultsById, ResultPage, ReleaseStatus, KGError, translateError, User, Scope, SpaceInformation, TypeInformation, TermsOfUse, ListOfUUID, ListOfReducedUserInformation } from "./response";

const _calculateBaseUrl = (host:string) => `http${host.startsWith('localhost')?'':'s'}://${host}/{{api_version}}/`;

const _createKgConfig = (host:string, tokenHandler: TokenHandler|null):KGConfig => new KGConfig(_calculateBaseUrl(host), tokenHandler, "{{id_namespace}}");

export class Client {
    {% for category, methods in methods_by_category %}{% if category != 'admin' %}{{category}}: {{category.capitalize()}};
    {% endif %}{% endfor %}
    constructor(host:string, tokenHandler: TokenHandler|null) {
        if(!host) {
            throw new Error("No hostname specified");
        }
        const kgConfig = _createKgConfig(host, tokenHandler);
        {% for category, methods in methods_by_category %}{% if category != 'admin' %}this.{{category}} = new {{category.capitalize()}}(kgConfig);
        {% endif %}{% endfor %}
    }
}
{% for category, methods in methods_by_category %}
export class {{category.capitalize()}} extends RequestsWithTokenHandler {
    constructor(config: KGConfig) {
        super(config);
    }
{% for method in methods %}
    {% if method.summary %}/*{{method.summary}}*/{% endif %}
    async {{method.name}}({% if method.has_payload %}payload: any{%if method.parameters%}, {%endif%}{% endif %}{% for p in method.parameters %}{% if not p.replace %}{{p.name}}{% if p.type %}: {{p.type}}{% endif %}{% endif %}{% if not loop.last and not p.replace%}, {% endif %}{% endfor %}){% if method.response_type %}:{% if 'Nullable<' in method.response_type %}Promise<{{method.response_type|replace('Nullable<', '')|replace('>', '')}}|null>{%else%}Promise<{{method.response_type}}>{% endif %}{% else %}:Promise<KGError|null>{% endif %} {
        const params = {% if not method.query_parameters %}{}{% else %}{ {% for p in method.query_parameters %}
            "{{p.name}}": {% if p.replace %}{{p.replace}}.{% endif %}{{p.param}}{% if not loop.last %},{% endif %}{% endfor %}
        }{% endif %};{% if method.dynamic_parameters %}
        {% for dynamic in method.dynamic_parameters %}Object.entries({{dynamic}}).forEach(([k, v]) => {
            if(!params[k]) {
                params[k] = v;
            }
        });{% endfor %}{% endif %}
        const result = await this._{{method.operation}}({% if method.path.has_path_params %}`{{method.path.name|replace('{', '${')}}`{%else%}"{{method.path.name}}"{% endif %}, {% if method.has_payload %}payload, {%elif method.operation not in ['get', 'delete'] %}null, {% endif %}params);
        return {% if method.generic_response_type %}{% if 'Nullable<' in method.response_type %}result.content?new {{method.generic_response_type}}(result.content):null{% else %}new {{method.response_type}}(result, {{method.generic_response_type}}){% endif %}{% elif method.response_type %}new {{method.response_type}}(result){% else %}translateError(result){% endif %};
    }
{% endfor %}
}
{% endfor %}

class ClientBuilder {
    _hostName: string;
    _tokenHandler: TokenHandler|null; 
    constructor(hostName: string) {
        this._tokenHandler = null;
        this._hostName = hostName;
    }

    _resolveTokenHandler(): TokenHandler | null{
        return this._tokenHandler;
    }

    withCustomTokenProvider(tokenProvider: () => string|null): ClientBuilder {
        this._tokenHandler = new CallableTokenHandler(tokenProvider);
        return this;
    }
    
    build():Client {
        return new Client(this._hostName, this._resolveTokenHandler());
    }

    buildAdmin():Admin {
        return new Admin(_createKgConfig(this._hostName, this._resolveTokenHandler()));
    }
    
}

export const kg = (host:string = "{{ default_kg_root }}"):ClientBuilder => new ClientBuilder(host);

