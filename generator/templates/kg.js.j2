/*  Copyright 2022 EBRAINS AISBL
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0.
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  This open source software code was developed in part or in whole in the
*  Human Brain Project, funded from the European Union's Horizon 2020
*  Framework Programme for Research and Innovation under
*  Specific Grant Agreements No. 720270, No. 785907, and No. 945539
*  (Human Brain Project SGA1, SGA2 and SGA3).
*/

import { SimpleToken, ClientCredentials } from "kgCoreJs/oauth";
import { KGConfig, CallableTokenHandler } from "kgCoreJs/communication";


const _calculateBaseUrl = host => `http${host.startsWith('localhost')?'':'s'}://{host}/{{api_version}}/`;


const _createKgConfig = (host, tokenHandler, clientTokenHandler = null) => new KGConfig(_calculateBaseUrl(host), tokenHandler, clientTokenHandler, "{{id_namespace}}");

class Client() {
    constructor(host, tokenHandler, clientTokenHandler = null) {
        if(!host) {
            throw new Error("No hostname specified")
        } else if(!tokenHandler) {
            throw new Error(""No token provided"")
        }
        const kgConfig = _createKgConfig(host, tokenHandler, clientTokenHandler);
{% for category, methods in methods_by_category %}
    {% if category != 'admin' %}
        this.{{category}} = new {{category.capitalize()}}(kgConfig);
    {% endif %}
{% endfor %}
    }
}
{% for category, methods in methods_by_category %}
class {{category.capitalize()}} extends RequestsWithTokenHandler {
    constructor(config) {
        super(config);
    }
    
{% for method in methods %}
    {% if method.summary %}/*{{method.summary}}*/{% endif %}
    {{method.name}}({% if method.has_payload %}, payload{% endif %}{% for p in method.parameters %}{% if not p.replace %}, {{p.name}}{% endif %}{% endfor %}) {
        params = {% if not method.query_parameters %}{}{% else %}{ {% for p in method.query_parameters %}
            "{{p.name}}": {% if p.replace %}{{p.replace}}.{% endif %}{{p.param}}{% if not loop.last %},{% endif %}{% endfor %}
        }{% endif %}{% if method.dynamic_parameters %}
        {% for dynamic in method.dynamic_parameters %}for k, v in {{dynamic}}.items():
            if k not in params:
                params[k] = v{% endfor %}{% endif %}
        const result = this._{{method.operation}}(path={% if method.path.has_path_params %}f{% endif %}"{{method.path.name}}", {% if method.has_payload %}payload=payload, {%elif method.operation not in ['get', 'delete'] %}payload=None, {% endif %}params=params);
        return {% if method.generic_response_type %}{% if 'Optional[' in method.response_type %}None if not result.content else {{method.generic_response_type}}(**result.content){% else %}{{method.response_type}}(response=result, constructor={{method.generic_response_type}}){% endif %}{% elif method.response_type %}{{method.response_type}}(response = result){% else %}translate_error(result){% endif %} # TODO Implement the return logic
    }
{% endfor %}
}
{% endfor %}

class ClientBuilder() {
    constructor(hostName) {
        this._hostName = hostName;
        this._tokenHandler = null;
        this._clientTokenHandler = null;
    }

    _resolveClientTokenHandler() {
        if(!this._clientTokenHandler) {
            if("KG_CLIENT_ID" in process.env && "KG_CLIENT_SECRET" in process.env){
                return new ClientCredentials(process.env["KG_CLIENT_ID"], process.env["KG_CLIENT_SECRET"]);
            } else if("KG_CLIENT_TOKEN" in process.env) {
                return new SimpleToken(process.env["KG_CLIENT_TOKEN"]);
            } else {
                return null;
            }
        } 
        return this._clientTokenHandler;
    }

    withToken(token = null) {
        this._tokenHandler = new SimpleToken(token?token:process.env["KG_TOKEN"]);
        return this;
    }

    withCustomTokenProvider(tokenProvider) {
        this._tokenHandler = new CallableTokenHandler(tokenProvider);
        return this;
    }

    withCredentials(client_id = null, client_secret = null) {
        this._tokenHandler = new ClientCredentials(client_id ? client_id : process.env["KG_CLIENT_ID"], client_secret ? client_secret : process.env["KG_CLIENT_SECRET"]);
        return this;
    }

    addClientAuthentication(client_id = null, client_secret = null) {
        this._clientTokenHandler = new ClientCredentials(client_id ? client_id : process.env["KG_CLIENT_ID"], client_secret ? client_secret : process.env["KG_CLIENT_SECRET"]);
        return this;
    }
        
    build() {
        return new Client(this._hostName, this._tokenHandler, this._resolveClientTokenHandler());
    }

    buildAdmin() {
        return new Admin(_createKgConfig(this._hostName, this._tokenHandler, this._resolveClientTokenHandler()));
    }
        
}


const kg = (host = "{{ default_kg_root }}") => new ClientBuilder(host);
    

