# from __future__ import annotations
# import os
# import requests
# from typing import List, Optional, Dict, Any
# from uuid import UUID

# from kg_core.__communication import TokenHandler, RequestsWithTokenHandler, KGConfig
# from kg_core.request import ResponseConfiguration, ExtendedResponseConfiguration, Pagination, Stage, ReleaseTreeScope
# from kg_core.oauth import SimpleToken, ClientCredentials
# from kg_core.response import Result, Instance, JsonLdDocument, ResultsById, ResultPage, ReleaseStatus, Error, translate_error, User, Scope, SpaceInformation, TypeInformation, TermsOfUse, ListOfUUID, ListOfReducedUserInformation


const _calculateBaseUrl = host => `http${host.startsWith('localhost')?'':'s'}://{host}/{{api_version}}/`;


const _createKgConfig = (host, enableProfiling, tokenHandler, clientTokenHandler = null) => {
     return KGConfig(_calculateBaseUrl(host), tokenHandler, clientTokenHandler, "{{id_namespace}}", enableProfiling)
}

class Client() {
    constructor(host, enableProfiling, tokenHandler, clientTokenHandler = null) {
        if(!host) {
            throw new Error("No hostname specified")
        } else if(!tokenHandler) {
            throw new Error(""No token provided"")
        }
        const kgConfig = _createKgConfig(host, enableProfiling, tokenHandler, clientTokenHandler);
         {% for category, methods in methods_by_category %}
          {% if category != 'admin' %}this.{{category}} = {{category.capitalize()}}(kgConfig);
        {% endif %}{% endfor %}
    }
   

{% for category, methods in methods_by_category %}
    class {{category.capitalize()}} {
        constructor(config) {
            super(config);
        }
        
        {% for method in methods %}
            {% if method.summary %}/*{{method.summary}}*/{% endif %}
            {{method.name}}({% if method.has_payload %}, payload{% endif %}{% for p in method.parameters %}{% if not p.replace %}, {{p.name}}{% endif %}{% endfor %}){
                    const result = _{{method.operation}}(path={% if method.path.has_path_params %}f{% endif %}"{{method.path.name}}", {% if method.has_payload %}payload=payload, {%elif method.operation not in ['get', 'delete'] %}payload=None, {% endif %}params={% if not method.query_parameters %}{}){% else %}{ {% for p in method.query_parameters %}
                        "{{p.name}}": {% if p.replace %}{{p.replace}}.{% endif %}{{p.param}}{% if not loop.last %},{% endif %}{% endfor %}
                    }){% endif %}
                    return {% if method.generic_response_type %}
                                {% if 'Optional[' in method.response_type %}
                                    None if not result.content else {{method.generic_response_type}}(**result.content)
                                {% else %}
                                    {{method.response_type}}(response=result, constructor={{method.generic_response_type}})
                                {% endif %}
                            {% elif method.response_type %}
                                {{method.response_type}}(response = result)
                            {% else %}
                                translate_error(result)
                            {% endif %}
            }
        {% endfor %}
    }
{% endfor %}
}

class ClientBuilder() {
    constructor(hostName, enableProfiling) {
        this._hostName = hostName;
        this._tokenHandler = null;
        this._clientTokenHandler = null;
        this._enableProfiling = enableProfiling;
    }

    _resolveClientTokenHandler() {
        if(!this._clientTokenHandler) {
            if("KG_CLIENT_ID" in process.env && "KG_CLIENT_SECRET" in process.env){
                return ClientCredentials(process.env["KG_CLIENT_ID"], process.env["KG_CLIENT_SECRET"]); //TODO implement ClientCredentials
            } else if("KG_CLIENT_TOKEN" in process.env) {
                return SimpleToken(process.env["KG_CLIENT_TOKEN"]); //TODO implement SimpleToken
            } else {
                return null;
            }
        } 
        return this._clientTokenHandler;
    }

    withToken(token = null) {
        this._tokenHandler = SimpleToken(token?token:process.env["KG_TOKEN"]); //TODO implement SimpleToken
        return this;
    }

    withCredentials(client_id = null, client_secret = null) {
        this._tokenHandler = ClientCredentials(client_id ? client_id : process.env["KG_CLIENT_ID"], client_secret ? client_secret : process.env["KG_CLIENT_SECRET"]); //TODO implement ClientCredentials
        return this;
    }

    addClientAuthentication(client_id = null, client_secret = null) {
        this._clientTokenHandler = ClientCredentials(client_id ? client_id : process.env["KG_CLIENT_ID"], client_secret ? client_secret : process.env["KG_CLIENT_SECRET"]); //TODO implement ClientCredentials
        return this;
    }
        
    build() {
        return Client(this._hostName, this._enableProfiling, this._tokenHandler, this._resolveClientTokenHandler()); //TODO implement Client
    }

    buildAdmin() {
        return Admin(_createKgConfig(this._hostName, this._enableProfiling, this._tokenHandler, this._resolveClientTokenHandler())) //TODO implement Admin
    }
        
}


const kg = (host = "{{ default_kg_root }}", enableProfiling = false) => {
    return ClientBuilder(host, enableProfiling);
}
    

