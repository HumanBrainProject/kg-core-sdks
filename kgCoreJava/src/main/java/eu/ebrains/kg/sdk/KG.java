/*  Copyright 2022 EBRAINS AISBL
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0.
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  This open source software code was developed in part or in whole in the
*  Human Brain Project, funded from the European Union's Horizon 2020
*  Framework Programme for Research and Innovation under
*  Specific Grant Agreements No. 720270, No. 785907, and No. 945539
*  (Human Brain Project SGA1, SGA2 and SGA3).
*/
package eu.ebrains.kg.sdk;

import eu.ebrains.kg.sdk.response.*;
import eu.ebrains.kg.sdk.request.*;
import eu.ebrains.kg.sdk.communication.*;
import java.util.*;
import eu.ebrains.kg.sdk.utils.*;
import java.util.stream.Stream;
import eu.ebrains.kg.sdk.communication.tokenHandler.TokenHandler;

/**
* The KG Client for the API version v3
*
* ATTENTION! This class is autogenerated! Do not apply any manual changes!
*/
public class KG {

    public static Client createClient(String host, Stage stage, String idNamespace, TokenHandler tokenHandler, TokenHandler clientTokenHandler, boolean enableProfiling) {
        return new Client(KGConfig.buildConfig(host, stage, idNamespace, tokenHandler, clientTokenHandler, enableProfiling));
    }

    public static Admin createAdmin(String host, Stage stage, String idNamespace, TokenHandler tokenHandler, TokenHandler clientTokenHandler, boolean enableProfiling){
        return new Admin(KGConfig.buildConfig(host, stage, idNamespace, tokenHandler, clientTokenHandler, enableProfiling));
    }

    public static class Client {
        private final String idNamespace;
        public final Instances instances;
        public final Jsonld jsonld;
        public final Queries queries;
        public final Setup setup;
        public final Spaces spaces;
        public final Types types;
        public final Users users;
        
        private Client(KGConfig kgConfig) {
           this.idNamespace = kgConfig != null ? kgConfig.getIdNamespace() : null;
           this.instances = new Instances(kgConfig);
            this.jsonld = new Jsonld(kgConfig);
            this.queries = new Queries(kgConfig);
            this.setup = new Setup(kgConfig);
            this.spaces = new Spaces(kgConfig);
            this.types = new Types(kgConfig);
            this.users = new Users(kgConfig);
            
        }

        public UUID uuidFromInstanceId(String instanceId){
            return Translator.fromInstanceId(instanceId, this.idNamespace);
        }
    }

    
    public static class Admin extends Communication {
        private Admin(KGConfig config) {
            super(config);
        }
    
        /**
        * Assign a type to a space
        */
        public AssignTypeToSpaceBuilder assignTypeToSpace(String space, String type) {
            return new AssignTypeToSpaceBuilder(space, type);
        }

        public class AssignTypeToSpaceBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String space;

            public AssignTypeToSpaceBuilder(String space, String type){
                this.space = space;
                this.params.put("type", type);
            }

            public Optional<KGError> invoke(){
                String path = "spaces/{space}/types";
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            
        }
    
        /**
        * Update invitation scope for this instance
        */
        public CalculateInstanceInvitationScopeBuilder calculateInstanceInvitationScope(UUID id) {
            return new CalculateInstanceInvitationScopeBuilder(id);
        }

        public class CalculateInstanceInvitationScopeBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public CalculateInstanceInvitationScopeBuilder(UUID id){
                this.id = id;
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/invitationScope";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
        }
    
        /**
        * Explicitly specify a space
        */
        public CreateSpaceDefinitionBuilder createSpaceDefinition(String space) {
            return new CreateSpaceDefinitionBuilder(space);
        }

        public class CreateSpaceDefinitionBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String space;

            public CreateSpaceDefinitionBuilder(String space){
                this.space = space;
                this.params.put("autorelease", false);
                this.params.put("clientSpace", false);
                this.params.put("deferCache", false);
                this.params.put("scopeRelevant", false);
            }

            public Optional<KGError> invoke(){
                String path = "spaces/{space}/specification";
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public CreateSpaceDefinitionBuilder autorelease(){
                params.put("autorelease", true);
                return this;
            }
            public CreateSpaceDefinitionBuilder clientSpace(){
                params.put("clientSpace", true);
                return this;
            }
            public CreateSpaceDefinitionBuilder deferCache(){
                params.put("deferCache", true);
                return this;
            }
            public CreateSpaceDefinitionBuilder scopeRelevant(){
                params.put("scopeRelevant", true);
                return this;
            }
            
        }
    
        /**
        * Specify a type
        */
        public CreateTypeDefinitionBuilder createTypeDefinition(String type) {
            return new CreateTypeDefinitionBuilder(type);
        }

        public class CreateTypeDefinitionBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public CreateTypeDefinitionBuilder(String type){
                this.params.put("type", type);
            }

            public Optional<KGError> invoke(JsonLdDocument payload){
                String path = "types/specification";
                Optional<KGResponseWithRequest> result = put(path, payload, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public CreateTypeDefinitionBuilder global(boolean global){
                params.put("global", global);
                return this;
            }
            
        }
    
        /**
        * Upload a property specification either globally or for the requesting client
        */
        public DefinePropertyBuilder defineProperty(String property) {
            return new DefinePropertyBuilder(property);
        }

        public class DefinePropertyBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public DefinePropertyBuilder(String property){
                this.params.put("property", property);
            }

            public Optional<KGError> invoke(JsonLdDocument payload){
                String path = "properties";
                Optional<KGResponseWithRequest> result = put(path, payload, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public DefinePropertyBuilder global(boolean global){
                params.put("global", global);
                return this;
            }
            
        }
    
        /**
        * Define a property specification either globally for the requesting client
        */
        public DefinePropertyForTypeBuilder definePropertyForType(String property, String type) {
            return new DefinePropertyForTypeBuilder(property, type);
        }

        public class DefinePropertyForTypeBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public DefinePropertyForTypeBuilder(String property, String type){
                this.params.put("property", property);
                this.params.put("type", type);
            }

            public Optional<KGError> invoke(JsonLdDocument payload){
                String path = "propertiesForType";
                Optional<KGResponseWithRequest> result = put(path, payload, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public DefinePropertyForTypeBuilder global(boolean global){
                params.put("global", global);
                return this;
            }
            
            
        }
    
        /**
        * Upload a property specification either globally or for the requesting client
        */
        public DeprecatePropertyBuilder deprecateProperty(String property) {
            return new DeprecatePropertyBuilder(property);
        }

        public class DeprecatePropertyBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public DeprecatePropertyBuilder(String property){
                this.params.put("property", property);
            }

            public Optional<KGError> invoke(){
                String path = "properties";
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public DeprecatePropertyBuilder global(boolean global){
                params.put("global", global);
                return this;
            }
            
        }
    
        /**
        * Deprecate a property specification for a specific type either globally or for the requesting client
        */
        public DeprecatePropertyForTypeBuilder deprecatePropertyForType(String property, String type) {
            return new DeprecatePropertyForTypeBuilder(property, type);
        }

        public class DeprecatePropertyForTypeBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public DeprecatePropertyForTypeBuilder(String property, String type){
                this.params.put("property", property);
                this.params.put("type", type);
            }

            public Optional<KGError> invoke(){
                String path = "propertiesForType";
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public DeprecatePropertyForTypeBuilder global(boolean global){
                params.put("global", global);
                return this;
            }
            
            
        }
    
        
        public GetAllRoleDefinitionsBuilder getAllRoleDefinitions() {
            return new GetAllRoleDefinitionsBuilder();
        }

        public class GetAllRoleDefinitionsBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public GetAllRoleDefinitionsBuilder(){
            }

            public Optional<KGError> invoke(){
                String path = "setup/permissions";
                Optional<KGResponseWithRequest> result = get(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
        }
    
        
        public GetAvailableChecksBuilder getAvailableChecks() {
            return new GetAvailableChecksBuilder();
        }

        public class GetAvailableChecksBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public GetAvailableChecksBuilder(){
            }

            public Optional<KGError> invoke(){
                String path = "health";
                Optional<KGResponseWithRequest> result = get(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
        }
    
        
        public GetClaimForRoleBuilder getClaimForRole(String role) {
            return new GetClaimForRoleBuilder(role);
        }

        public class GetClaimForRoleBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String role;

            public GetClaimForRoleBuilder(String role){
                this.role = role;
            }

            public Optional<KGError> invoke(){
                String path = "setup/permissions/{role}";
                path = path.replace("{role}", String.valueOf(this.role));
                Optional<KGResponseWithRequest> result = get(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            public GetClaimForRoleBuilder space(String space){
                params.put("space", space);
                return this;
            }
        }
    
        
        public GetReportBuilder getReport(String name) {
            return new GetReportBuilder(name);
        }

        public class GetReportBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String name;

            public GetReportBuilder(String name){
                this.name = name;
                this.params.put("stage", getStage());
            }

            public Optional<KGError> invoke(){
                String path = "health/{name}";
                path = path.replace("{name}", String.valueOf(this.name));
                Optional<KGResponseWithRequest> result = get(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            
        }
    
        
        public HealthStatusBuilder healthStatus() {
            return new HealthStatusBuilder();
        }

        public class HealthStatusBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public HealthStatusBuilder(){
            }

            public Optional<KGError> invoke(){
                String path = "health";
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
        }
    
        /**
        * Remove a space definition
        */
        public RemoveSpaceDefinitionBuilder removeSpaceDefinition(String space) {
            return new RemoveSpaceDefinitionBuilder(space);
        }

        public class RemoveSpaceDefinitionBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String space;

            public RemoveSpaceDefinitionBuilder(String space){
                this.space = space;
            }

            public Optional<KGError> invoke(){
                String path = "spaces/{space}/specification";
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
        }
    
        /**
        * Remove a type definition
        */
        public RemoveTypeDefinitionBuilder removeTypeDefinition() {
            return new RemoveTypeDefinitionBuilder();
        }

        public class RemoveTypeDefinitionBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public RemoveTypeDefinitionBuilder(){
            }

            public Optional<KGError> invoke(){
                String path = "types/specification";
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public RemoveTypeDefinitionBuilder global(boolean global){
                params.put("global", global);
                return this;
            }
            public RemoveTypeDefinitionBuilder type(String type){
                params.put("type", type);
                return this;
            }
        }
    
        /**
        * Remove a type in space definition
        */
        public RemoveTypeFromSpaceBuilder removeTypeFromSpace(String space, String type) {
            return new RemoveTypeFromSpaceBuilder(space, type);
        }

        public class RemoveTypeFromSpaceBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String space;

            public RemoveTypeFromSpaceBuilder(String space, String type){
                this.space = space;
                this.params.put("type", type);
            }

            public Optional<KGError> invoke(){
                String path = "spaces/{space}/types";
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            
        }
    
        /**
        * Trigger a rerun of the events of this space
        */
        public RerunEventsBuilder rerunEvents(String space) {
            return new RerunEventsBuilder(space);
        }

        public class RerunEventsBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String space;

            public RerunEventsBuilder(String space){
                this.space = space;
            }

            public Optional<KGError> invoke(){
                String path = "spaces/{space}/eventHistory";
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
        }
    
        /**
        * Triggers the inference of all documents of the given space
        */
        public TriggerInferenceBuilder triggerInference(String space) {
            return new TriggerInferenceBuilder(space);
        }

        public class TriggerInferenceBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String space;

            public TriggerInferenceBuilder(String space){
                this.space = space;
                this.params.put("async", false);
            }

            public Optional<KGError> invoke(){
                String path = "spaces/{space}/inference";
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = post(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public TriggerInferenceBuilder async(){
                params.put("async", true);
                return this;
            }
            public TriggerInferenceBuilder identifier(String identifier){
                params.put("identifier", identifier);
                return this;
            }
            
        }
    
        
        public UpdateClaimForRoleBuilder updateClaimForRole(boolean remove, String role) {
            return new UpdateClaimForRoleBuilder(remove, role);
        }

        public class UpdateClaimForRoleBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String role;

            public UpdateClaimForRoleBuilder(boolean remove, String role){
                this.params.put("remove", remove);
                this.role = role;
            }

            public Optional<KGError> invoke(Map<String, Object> payload){
                String path = "setup/permissions/{role}";
                path = path.replace("{role}", String.valueOf(this.role));
                Optional<KGResponseWithRequest> result = patch(path, payload, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            
            public UpdateClaimForRoleBuilder space(String space){
                params.put("space", space);
                return this;
            }
        }
    
    }
    
    public static class Instances extends Communication {
        private Instances(KGConfig config) {
            super(config);
        }
    
        /**
        * Replace contribution to an existing instance
        */
        public ContributeToFullReplacementBuilder contributeToFullReplacement(UUID id) {
            return new ContributeToFullReplacementBuilder(id);
        }

        public class ContributeToFullReplacementBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public ContributeToFullReplacementBuilder(UUID id){
                this.id = id;
            }

            public Result<Instance> invoke(JsonLdDocument payload){
                return invoke(payload, Instance.class);
            }

            
            public <T> Result<T> invoke(JsonLdDocument payload, Class<T> targetClass){
                String path = "instances/{id}";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = put(path, payload, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
            public ContributeToFullReplacementBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public ContributeToFullReplacementBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public ContributeToFullReplacementBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public ContributeToFullReplacementBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public ContributeToFullReplacementBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public ContributeToFullReplacementBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
        }
    
        /**
        * Partially update contribution to an existing instance
        */
        public ContributeToPartialReplacementBuilder contributeToPartialReplacement(UUID id) {
            return new ContributeToPartialReplacementBuilder(id);
        }

        public class ContributeToPartialReplacementBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public ContributeToPartialReplacementBuilder(UUID id){
                this.id = id;
            }

            public Result<Instance> invoke(JsonLdDocument payload){
                return invoke(payload, Instance.class);
            }

            
            public <T> Result<T> invoke(JsonLdDocument payload, Class<T> targetClass){
                String path = "instances/{id}";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = patch(path, payload, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
            public ContributeToPartialReplacementBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public ContributeToPartialReplacementBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public ContributeToPartialReplacementBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public ContributeToPartialReplacementBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public ContributeToPartialReplacementBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public ContributeToPartialReplacementBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
        }
    
        /**
        * Create new instance with a system generated id
        */
        public CreateNewBuilder createNew(String space) {
            return new CreateNewBuilder(space);
        }

        public class CreateNewBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public CreateNewBuilder(String space){
                this.params.put("space", space);
            }

            public Result<Instance> invoke(JsonLdDocument payload){
                return invoke(payload, Instance.class);
            }

            
            public <T> Result<T> invoke(JsonLdDocument payload, Class<T> targetClass){
                String path = "instances";
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public CreateNewBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public CreateNewBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public CreateNewBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public CreateNewBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public CreateNewBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public CreateNewBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
            
        }
    
        /**
        * Create new instance with a client defined id
        */
        public CreateNewWithIdBuilder createNewWithId(UUID id, String space) {
            return new CreateNewWithIdBuilder(id, space);
        }

        public class CreateNewWithIdBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public CreateNewWithIdBuilder(UUID id, String space){
                this.id = id;
                this.params.put("space", space);
            }

            public Result<Instance> invoke(JsonLdDocument payload){
                return invoke(payload, Instance.class);
            }

            
            public <T> Result<T> invoke(JsonLdDocument payload, Class<T> targetClass){
                String path = "instances/{id}";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
            public CreateNewWithIdBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public CreateNewWithIdBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public CreateNewWithIdBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public CreateNewWithIdBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public CreateNewWithIdBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public CreateNewWithIdBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
            
        }
    
        /**
        * Delete an instance
        */
        public DeleteBuilder delete(UUID id) {
            return new DeleteBuilder(id);
        }

        public class DeleteBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public DeleteBuilder(UUID id){
                this.id = id;
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
        }
    
        /**
        * Get the instance
        */
        public GetByIdBuilder getById(UUID id) {
            return new GetByIdBuilder(id);
        }

        public class GetByIdBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public GetByIdBuilder(UUID id){
                this.id = id;
                this.params.put("stage", getStage());
            }

            public Result<Instance> invoke(){
                return invoke(Instance.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "instances/{id}";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
            public GetByIdBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public GetByIdBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public GetByIdBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public GetByIdBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public GetByIdBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public GetByIdBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
            
        }
    
        /**
        * Read instances by the given list of (external) identifiers
        */
        public GetByIdentifiersBuilder getByIdentifiers() {
            return new GetByIdentifiersBuilder();
        }

        public class GetByIdentifiersBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public GetByIdentifiersBuilder(){
                this.params.put("stage", getStage());
            }

            public ResultsById<Instance> invoke(List<String> payload){
                return invoke(payload, Instance.class);
            }

            
            public <T> ResultsById<T> invoke(List<String> payload, Class<T> targetClass){
                String path = "instancesByIdentifiers";
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return ResultsById.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public GetByIdentifiersBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public GetByIdentifiersBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public GetByIdentifiersBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public GetByIdentifiersBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public GetByIdentifiersBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public GetByIdentifiersBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
            
        }
    
        /**
        * Bulk operation of /instances/{id} to read instances by their UUIDs
        */
        public GetByIdsBuilder getByIds() {
            return new GetByIdsBuilder();
        }

        public class GetByIdsBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public GetByIdsBuilder(){
                this.params.put("stage", getStage());
            }

            public ResultsById<Instance> invoke(List<String> payload){
                return invoke(payload, Instance.class);
            }

            
            public <T> ResultsById<T> invoke(List<String> payload, Class<T> targetClass){
                String path = "instancesByIds";
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return ResultsById.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public GetByIdsBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public GetByIdsBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public GetByIdsBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public GetByIdsBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public GetByIdsBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public GetByIdsBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
            
        }
    
        /**
        * Get incoming links for a specific instance (paginated)
        */
        public GetIncomingLinksBuilder getIncomingLinks(UUID id, String property, String type) {
            return new GetIncomingLinksBuilder(id, property, type);
        }

        public class GetIncomingLinksBuilder extends ResultPageProvider<GetIncomingLinksBuilder> {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public GetIncomingLinksBuilder(UUID id, String property, String type){
                this.id = id;
                this.params.put("property", property);
                this.params.put("type", type);
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
                this.params.put("stage", getStage());
            }

            public Stream<Instance> stream(){
                return stream(Instance.class);
            }

            public ResultPage<Instance> invoke(){
                return invoke(Instance.class);
            }

            @Override 
            public <T> ResultPage<T> invoke(Class<T> targetClass){
                String path = "instances/{id}/incomingLinks";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = get(path, params);
                return ResultPage.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public GetIncomingLinksBuilder from(int from){
                params.put("from", from);
                return this;
            }
            
            
            public GetIncomingLinksBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public GetIncomingLinksBuilder size(int size){
                params.put("size", size);
                return this;
            }
            
            
        }
    
        /**
        * Get the neighborhood for the instance by its KG-internal ID
        */
        public GetNeighborsBuilder getNeighbors(UUID id) {
            return new GetNeighborsBuilder(id);
        }

        public class GetNeighborsBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public GetNeighborsBuilder(UUID id){
                this.id = id;
                this.params.put("stage", getStage());
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/neighbors";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = get(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            
        }
    
        /**
        * Get the release status for an instance
        */
        public GetReleaseStatusBuilder getReleaseStatus(UUID id, ReleaseTreeScope releaseTreeScope) {
            return new GetReleaseStatusBuilder(id, releaseTreeScope);
        }

        public class GetReleaseStatusBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public GetReleaseStatusBuilder(UUID id, ReleaseTreeScope releaseTreeScope){
                this.id = id;
                this.params.put("releaseTreeScope", releaseTreeScope);
            }

            public Result<ReleaseStatus> invoke(){
                return invoke(ReleaseStatus.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "instances/{id}/release/status";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
            
        }
    
        /**
        * Get the release status for multiple instances
        */
        public GetReleaseStatusByIdsBuilder getReleaseStatusByIds(ReleaseTreeScope releaseTreeScope) {
            return new GetReleaseStatusByIdsBuilder(releaseTreeScope);
        }

        public class GetReleaseStatusByIdsBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public GetReleaseStatusByIdsBuilder(ReleaseTreeScope releaseTreeScope){
                this.params.put("releaseTreeScope", releaseTreeScope);
            }

            public ResultsById<ReleaseStatus> invoke(List<UUID> payload){
                return invoke(payload, ReleaseStatus.class);
            }

            
            public <T> ResultsById<T> invoke(List<UUID> payload, Class<T> targetClass){
                String path = "instancesByIds/release/status";
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return ResultsById.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
        }
    
        /**
        * Get the scope for the instance by its KG-internal ID
        */
        public GetScopeBuilder getScope(UUID id) {
            return new GetScopeBuilder(id);
        }

        public class GetScopeBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public GetScopeBuilder(UUID id){
                this.id = id;
                this.params.put("applyRestrictions", false);
                this.params.put("returnPermissions", false);
                this.params.put("stage", getStage());
            }

            public Result<Scope> invoke(){
                return invoke(Scope.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "instances/{id}/scope";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public GetScopeBuilder applyRestrictions(){
                params.put("applyRestrictions", true);
                return this;
            }
            
            public GetScopeBuilder returnPermissions(){
                params.put("returnPermissions", true);
                return this;
            }
            
        }
    
        /**
        * Returns suggestions for an instance to be linked by the given property (e.g. for the KG Editor) - and takes into account the passed payload (already chosen values, reflection on dependencies between properties - e.g. providing only parcellations for an already chosen brain atlas). Please note: This service will return released values for "additionalValue" in case a user only has minimal read rights
        */
        public GetSuggestedLinksForPropertyBuilder getSuggestedLinksForProperty(UUID id, String property) {
            return new GetSuggestedLinksForPropertyBuilder(id, property);
        }

        public class GetSuggestedLinksForPropertyBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public GetSuggestedLinksForPropertyBuilder(UUID id, String property){
                this.id = id;
                this.params.put("property", property);
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
                this.params.put("stage", getStage());
            }

            public Optional<KGError> invoke(JsonLdDocument payload){
                String path = "instances/{id}/suggestedLinksForProperty";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public GetSuggestedLinksForPropertyBuilder from(int from){
                params.put("from", from);
                return this;
            }
            
            
            public GetSuggestedLinksForPropertyBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public GetSuggestedLinksForPropertyBuilder search(String search){
                params.put("search", search);
                return this;
            }
            public GetSuggestedLinksForPropertyBuilder size(int size){
                params.put("size", size);
                return this;
            }
            public GetSuggestedLinksForPropertyBuilder sourceType(String sourceType){
                params.put("sourceType", sourceType);
                return this;
            }
            
            public GetSuggestedLinksForPropertyBuilder targetType(String targetType){
                params.put("targetType", targetType);
                return this;
            }
        }
    
        /**
        * Returns suggestions for an instance to be linked by the given property (e.g. for the KG Editor). Please note: This service will return released values for "additionalValue" in case a user only has minimal read rights
        */
        public GetSuggestedLinksForProperty_1Builder getSuggestedLinksForProperty_1(UUID id, String property) {
            return new GetSuggestedLinksForProperty_1Builder(id, property);
        }

        public class GetSuggestedLinksForProperty_1Builder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public GetSuggestedLinksForProperty_1Builder(UUID id, String property){
                this.id = id;
                this.params.put("property", property);
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
                this.params.put("stage", getStage());
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/suggestedLinksForProperty";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = get(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            public GetSuggestedLinksForProperty_1Builder from(int from){
                params.put("from", from);
                return this;
            }
            
            
            public GetSuggestedLinksForProperty_1Builder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public GetSuggestedLinksForProperty_1Builder search(String search){
                params.put("search", search);
                return this;
            }
            public GetSuggestedLinksForProperty_1Builder size(int size){
                params.put("size", size);
                return this;
            }
            public GetSuggestedLinksForProperty_1Builder sourceType(String sourceType){
                params.put("sourceType", sourceType);
                return this;
            }
            
            public GetSuggestedLinksForProperty_1Builder targetType(String targetType){
                params.put("targetType", targetType);
                return this;
            }
        }
    
        /**
        * Create or update an invitation for the given user to review the given instance
        */
        public InviteUserForBuilder inviteUserFor(UUID id, UUID userId) {
            return new InviteUserForBuilder(id, userId);
        }

        public class InviteUserForBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;
            private final UUID userId;

            public InviteUserForBuilder(UUID id, UUID userId){
                this.id = id;
                this.userId = userId;
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/invitedUsers/{userId}";
                path = path.replace("{id}", String.valueOf(this.id));
                path = path.replace("{userId}", String.valueOf(this.userId));
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            
        }
    
        /**
        * Returns a list of instances according to their types
        */
        public ListBuilder list(String type) {
            return new ListBuilder(type);
        }

        public class ListBuilder extends ResultPageProvider<ListBuilder> {

            private final Map<String, Object> params = new HashMap<>();

            public ListBuilder(String type){
                this.params.put("type", type);
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
                this.params.put("stage", getStage());
            }

            public Stream<Instance> stream(){
                return stream(Instance.class);
            }

            public ResultPage<Instance> invoke(){
                return invoke(Instance.class);
            }

            @Override 
            public <T> ResultPage<T> invoke(Class<T> targetClass){
                String path = "instances";
                Optional<KGResponseWithRequest> result = get(path, params);
                return ResultPage.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public ListBuilder filterProperty(String filterProperty){
                params.put("filterProperty", filterProperty);
                return this;
            }
            public ListBuilder filterValue(String filterValue){
                params.put("filterValue", filterValue);
                return this;
            }
            public ListBuilder from(int from){
                params.put("from", from);
                return this;
            }
            public ListBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public ListBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public ListBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public ListBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
            public ListBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public ListBuilder searchByLabel(String searchByLabel){
                params.put("searchByLabel", searchByLabel);
                return this;
            }
            public ListBuilder size(int size){
                params.put("size", size);
                return this;
            }
            public ListBuilder space(String space){
                params.put("space", space);
                return this;
            }
            
            
        }
    
        /**
        * List invitations for review for the given instance
        */
        public ListInvitationsBuilder listInvitations(UUID id) {
            return new ListInvitationsBuilder(id);
        }

        public class ListInvitationsBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public ListInvitationsBuilder(UUID id){
                this.id = id;
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/invitedUsers";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = get(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
        }
    
        /**
        * List instances with invitations
        */
        public ListWithInvitationsBuilder listWithInvitations() {
            return new ListWithInvitationsBuilder();
        }

        public class ListWithInvitationsBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public ListWithInvitationsBuilder(){
            }

            public Result<ListOfUUID> invoke(){
                return invoke(ListOfUUID.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "instancesWithInvitations";
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
        }
    
        /**
        * Move an instance to another space
        */
        public MoveBuilder move(UUID id, String space) {
            return new MoveBuilder(id, space);
        }

        public class MoveBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;
            private final String space;

            public MoveBuilder(UUID id, String space){
                this.id = id;
                this.space = space;
            }

            public Result<Instance> invoke(){
                return invoke(Instance.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "instances/{id}/spaces/{space}";
                path = path.replace("{id}", String.valueOf(this.id));
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
            public MoveBuilder incomingLinksPageSize(int incomingLinksPageSize){
                params.put("incomingLinksPageSize", incomingLinksPageSize);
                return this;
            }
            public MoveBuilder returnAlternatives(boolean returnAlternatives){
                params.put("returnAlternatives", returnAlternatives);
                return this;
            }
            public MoveBuilder returnEmbedded(boolean returnEmbedded){
                params.put("returnEmbedded", returnEmbedded);
                return this;
            }
            public MoveBuilder returnIncomingLinks(boolean returnIncomingLinks){
                params.put("returnIncomingLinks", returnIncomingLinks);
                return this;
            }
            public MoveBuilder returnPayload(boolean returnPayload){
                params.put("returnPayload", returnPayload);
                return this;
            }
            public MoveBuilder returnPermissions(boolean returnPermissions){
                params.put("returnPermissions", returnPermissions);
                return this;
            }
            
        }
    
        /**
        * Release or re-release an instance
        */
        public ReleaseBuilder release(UUID id) {
            return new ReleaseBuilder(id);
        }

        public class ReleaseBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public ReleaseBuilder(UUID id){
                this.id = id;
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/release";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = put(path, null, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            public ReleaseBuilder revision(String revision){
                params.put("revision", revision);
                return this;
            }
        }
    
        /**
        * Revoke an invitation for the given user to review the given instance
        */
        public RevokeUserInvitationBuilder revokeUserInvitation(UUID id, UUID userId) {
            return new RevokeUserInvitationBuilder(id, userId);
        }

        public class RevokeUserInvitationBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;
            private final UUID userId;

            public RevokeUserInvitationBuilder(UUID id, UUID userId){
                this.id = id;
                this.userId = userId;
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/invitedUsers/{userId}";
                path = path.replace("{id}", String.valueOf(this.id));
                path = path.replace("{userId}", String.valueOf(this.userId));
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
            
        }
    
        /**
        * Unrelease an instance
        */
        public UnreleaseBuilder unrelease(UUID id) {
            return new UnreleaseBuilder(id);
        }

        public class UnreleaseBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID id;

            public UnreleaseBuilder(UUID id){
                this.id = id;
            }

            public Optional<KGError> invoke(){
                String path = "instances/{id}/release";
                path = path.replace("{id}", String.valueOf(this.id));
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
        }
    
    }
    
    public static class Jsonld extends Communication {
        private Jsonld(KGConfig config) {
            super(config);
        }
    
        /**
        * Normalizes the passed payload according to the EBRAINS KG conventions
        */
        public NormalizePayloadBuilder normalizePayload() {
            return new NormalizePayloadBuilder();
        }

        public class NormalizePayloadBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public NormalizePayloadBuilder(){
            }

            public Optional<KGError> invoke(JsonLdDocument payload){
                String path = "jsonld/normalizedPayload";
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
        }
    
    }
    
    public static class Queries extends Communication {
        private Queries(KGConfig config) {
            super(config);
        }
    
        /**
        * Execute a stored query to receive the instances
        */
        public ExecuteQueryByIdBuilder executeQueryById(UUID queryId) {
            return new ExecuteQueryByIdBuilder(queryId);
        }

        public class ExecuteQueryByIdBuilder extends ResultPageProvider<ExecuteQueryByIdBuilder> {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID queryId;

            public ExecuteQueryByIdBuilder(UUID queryId){
                this.queryId = queryId;
                this.params.put("additionalRequestParams", new HashMap<String, Object>());
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
                this.params.put("stage", getStage());
            }

            public Stream<JsonLdDocument> stream(){
                return stream(JsonLdDocument.class);
            }

            public ResultPage<JsonLdDocument> invoke(){
                return invoke(JsonLdDocument.class);
            }

            @Override 
            public <T> ResultPage<T> invoke(Class<T> targetClass){
                String path = "queries/{queryId}/instances";
                path = path.replace("{queryId}", String.valueOf(this.queryId));
                Optional<KGResponseWithRequest> result = get(path, params);
                return ResultPage.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public ExecuteQueryByIdBuilder additionalRequestParams(Map<String, Object> additionalRequestParams){
                params.put("additionalRequestParams", additionalRequestParams);
                return this;
            }
            public ExecuteQueryByIdBuilder from(int from){
                params.put("from", from);
                return this;
            }
            public ExecuteQueryByIdBuilder instanceId(UUID instanceId){
                params.put("instanceId", instanceId);
                return this;
            }
            
            public ExecuteQueryByIdBuilder restrictToSpaces(List<String> restrictToSpaces){
                params.put("restrictToSpaces", restrictToSpaces);
                return this;
            }
            public ExecuteQueryByIdBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public ExecuteQueryByIdBuilder size(int size){
                params.put("size", size);
                return this;
            }
            
        }
    
        /**
        * Get the query specification with the given query id in a specific space
        */
        public GetQuerySpecificationBuilder getQuerySpecification(UUID queryId) {
            return new GetQuerySpecificationBuilder(queryId);
        }

        public class GetQuerySpecificationBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID queryId;

            public GetQuerySpecificationBuilder(UUID queryId){
                this.queryId = queryId;
            }

            public Result<Instance> invoke(){
                return invoke(Instance.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "queries/{queryId}";
                path = path.replace("{queryId}", String.valueOf(this.queryId));
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
        }
    
        /**
        * List the queries and filter them by root type and/or text in the label, name or description
        */
        public ListPerRootTypeBuilder listPerRootType() {
            return new ListPerRootTypeBuilder();
        }

        public class ListPerRootTypeBuilder extends ResultPageProvider<ListPerRootTypeBuilder> {

            private final Map<String, Object> params = new HashMap<>();

            public ListPerRootTypeBuilder(){
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
            }

            public Stream<Instance> stream(){
                return stream(Instance.class);
            }

            public ResultPage<Instance> invoke(){
                return invoke(Instance.class);
            }

            @Override 
            public <T> ResultPage<T> invoke(Class<T> targetClass){
                String path = "queries";
                Optional<KGResponseWithRequest> result = get(path, params);
                return ResultPage.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public ListPerRootTypeBuilder from(int from){
                params.put("from", from);
                return this;
            }
            public ListPerRootTypeBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public ListPerRootTypeBuilder search(String search){
                params.put("search", search);
                return this;
            }
            public ListPerRootTypeBuilder size(int size){
                params.put("size", size);
                return this;
            }
            public ListPerRootTypeBuilder type(String type){
                params.put("type", type);
                return this;
            }
        }
    
        /**
        * Remove a query specification
        */
        public RemoveQueryBuilder removeQuery(UUID queryId) {
            return new RemoveQueryBuilder(queryId);
        }

        public class RemoveQueryBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID queryId;

            public RemoveQueryBuilder(UUID queryId){
                this.queryId = queryId;
            }

            public Optional<KGError> invoke(){
                String path = "queries/{queryId}";
                path = path.replace("{queryId}", String.valueOf(this.queryId));
                Optional<KGResponseWithRequest> result = delete(path, params);
                return result.isPresent() ? Translator.translateError(result.get()) : Optional.empty();
            }
            
            
        }
    
        /**
        * Execute the query in the payload (e.g. for execution before saving with the KG QueryBuilder)
        */
        public RunDynamicQueryBuilder runDynamicQuery() {
            return new RunDynamicQueryBuilder();
        }

        public class RunDynamicQueryBuilder extends ResultPageProviderWithPayload<RunDynamicQueryBuilder, JsonLdDocument> {

            private final Map<String, Object> params = new HashMap<>();

            public RunDynamicQueryBuilder(){
                this.params.put("additionalRequestParams", new HashMap<String, Object>());
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
                this.params.put("stage", getStage());
            }

            public Stream<JsonLdDocument> stream(JsonLdDocument payload){
                return stream(payload, JsonLdDocument.class);
            }

            public ResultPage<JsonLdDocument> invoke(JsonLdDocument payload){
                return invoke(payload, JsonLdDocument.class);
            }

            @Override 
            public <T> ResultPage<T> invoke(JsonLdDocument payload, Class<T> targetClass){
                String path = "queries";
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return ResultPage.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public RunDynamicQueryBuilder additionalRequestParams(Map<String, Object> additionalRequestParams){
                params.put("additionalRequestParams", additionalRequestParams);
                return this;
            }
            public RunDynamicQueryBuilder from(int from){
                params.put("from", from);
                return this;
            }
            public RunDynamicQueryBuilder instanceId(UUID instanceId){
                params.put("instanceId", instanceId);
                return this;
            }
            public RunDynamicQueryBuilder restrictToSpaces(List<String> restrictToSpaces){
                params.put("restrictToSpaces", restrictToSpaces);
                return this;
            }
            public RunDynamicQueryBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public RunDynamicQueryBuilder size(int size){
                params.put("size", size);
                return this;
            }
            
        }
    
        /**
        * Create or save a query specification
        */
        public SaveQueryBuilder saveQuery(UUID queryId) {
            return new SaveQueryBuilder(queryId);
        }

        public class SaveQueryBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final UUID queryId;

            public SaveQueryBuilder(UUID queryId){
                this.queryId = queryId;
            }

            public Result<Instance> invoke(JsonLdDocument payload){
                return invoke(payload, Instance.class);
            }

            
            public <T> Result<T> invoke(JsonLdDocument payload, Class<T> targetClass){
                String path = "queries/{queryId}";
                path = path.replace("{queryId}", String.valueOf(this.queryId));
                Optional<KGResponseWithRequest> result = put(path, payload, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            
            public SaveQueryBuilder space(String space){
                params.put("space", space);
                return this;
            }
        }
    
    }
    
    public static class Setup extends Communication {
        private Setup(KGConfig config) {
            super(config);
        }
    
        /**
        * Get the endpoint of the configured openid configuration
        */
        public GetOpenIdConfigUrlBuilder getOpenIdConfigUrl() {
            return new GetOpenIdConfigUrlBuilder();
        }

        public class GetOpenIdConfigUrlBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public GetOpenIdConfigUrlBuilder(){
            }

            public Result<JsonLdDocument> invoke(){
                return invoke(JsonLdDocument.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "setup/authentication";
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
        }
    
    }
    
    public static class Spaces extends Communication {
        private Spaces(KGConfig config) {
            super(config);
        }
    
        
        public GetBuilder get(String space) {
            return new GetBuilder(space);
        }

        public class GetBuilder {

            private final Map<String, Object> params = new HashMap<>();
            private final String space;

            public GetBuilder(String space){
                this.space = space;
                this.params.put("permissions", false);
            }

            public Result<SpaceInformation> invoke(){
                return invoke(SpaceInformation.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "spaces/{space}";
                path = path.replace("{space}", String.valueOf(this.space));
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public GetBuilder permissions(){
                params.put("permissions", true);
                return this;
            }
            
        }
    
        
        public ListBuilder list() {
            return new ListBuilder();
        }

        public class ListBuilder extends ResultPageProvider<ListBuilder> {

            private final Map<String, Object> params = new HashMap<>();

            public ListBuilder(){
                this.params.put("from", 0);
                this.params.put("permissions", false);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
            }

            public Stream<SpaceInformation> stream(){
                return stream(SpaceInformation.class);
            }

            public ResultPage<SpaceInformation> invoke(){
                return invoke(SpaceInformation.class);
            }

            @Override 
            public <T> ResultPage<T> invoke(Class<T> targetClass){
                String path = "spaces";
                Optional<KGResponseWithRequest> result = get(path, params);
                return ResultPage.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public ListBuilder from(int from){
                params.put("from", from);
                return this;
            }
            public ListBuilder permissions(){
                params.put("permissions", true);
                return this;
            }
            public ListBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public ListBuilder size(int size){
                params.put("size", size);
                return this;
            }
        }
    
    }
    
    public static class Types extends Communication {
        private Types(KGConfig config) {
            super(config);
        }
    
        /**
        * Returns the types according to the list of names - either with property information or without
        */
        public GetByNameBuilder getByName() {
            return new GetByNameBuilder();
        }

        public class GetByNameBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public GetByNameBuilder(){
                this.params.put("stage", getStage());
                this.params.put("withIncomingLinks", false);
                this.params.put("withProperties", false);
            }

            public ResultsById<TypeInformation> invoke(List<String> payload){
                return invoke(payload, TypeInformation.class);
            }

            
            public <T> ResultsById<T> invoke(List<String> payload, Class<T> targetClass){
                String path = "typesByName";
                Optional<KGResponseWithRequest> result = post(path, payload, params);
                return ResultsById.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public GetByNameBuilder space(String space){
                params.put("space", space);
                return this;
            }
            
            public GetByNameBuilder withIncomingLinks(){
                params.put("withIncomingLinks", true);
                return this;
            }
            public GetByNameBuilder withProperties(){
                params.put("withProperties", true);
                return this;
            }
        }
    
        /**
        * Returns the types available - either with property information or without
        */
        public ListBuilder list() {
            return new ListBuilder();
        }

        public class ListBuilder extends ResultPageProvider<ListBuilder> {

            private final Map<String, Object> params = new HashMap<>();

            public ListBuilder(){
                this.params.put("from", 0);
                this.params.put("returnTotalResults", true);
                this.params.put("size", 50);
                this.params.put("stage", getStage());
                this.params.put("withIncomingLinks", false);
                this.params.put("withProperties", false);
            }

            public Stream<TypeInformation> stream(){
                return stream(TypeInformation.class);
            }

            public ResultPage<TypeInformation> invoke(){
                return invoke(TypeInformation.class);
            }

            @Override 
            public <T> ResultPage<T> invoke(Class<T> targetClass){
                String path = "types";
                Optional<KGResponseWithRequest> result = get(path, params);
                return ResultPage.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
            public ListBuilder from(int from){
                params.put("from", from);
                return this;
            }
            public ListBuilder returnTotalResults(boolean returnTotalResults){
                params.put("returnTotalResults", returnTotalResults);
                return this;
            }
            public ListBuilder size(int size){
                params.put("size", size);
                return this;
            }
            public ListBuilder space(String space){
                params.put("space", space);
                return this;
            }
            
            public ListBuilder withIncomingLinks(){
                params.put("withIncomingLinks", true);
                return this;
            }
            public ListBuilder withProperties(){
                params.put("withProperties", true);
                return this;
            }
        }
    
    }
    
    public static class Users extends Communication {
        private Users(KGConfig config) {
            super(config);
        }
    
        /**
        * Retrieve user information from the passed token (including detailed information such as e-mail address)
        */
        public MyInfoBuilder myInfo() {
            return new MyInfoBuilder();
        }

        public class MyInfoBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public MyInfoBuilder(){
            }

            public Result<User> invoke(){
                return invoke(User.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "users/me";
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
        }
    
        /**
        * Retrieve the roles for the current user
        */
        public MyRolesBuilder myRoles() {
            return new MyRolesBuilder();
        }

        public class MyRolesBuilder {

            private final Map<String, Object> params = new HashMap<>();

            public MyRolesBuilder(){
            }

            public Result<UserWithRoles> invoke(){
                return invoke(UserWithRoles.class);
            }

            
            public <T> Result<T> invoke(Class<T> targetClass){
                String path = "users/me/roles";
                Optional<KGResponseWithRequest> result = get(path, params);
                return Result.translate(getIdNamespace(), result.orElse(null), targetClass);
            }
            
        }
    
    }
    


    public static KGClientBuilder kg(){
        return new KGClientBuilder();
    }
}